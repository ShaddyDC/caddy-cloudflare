name: Update caddy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  update:
    name: Update known version
    runs-on: ubuntu-latest

    outputs:
      updated: ${{ steps.caddy-version.outputs.updated }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Get latest caddy
      id: caddy-version
      shell: bash
      run: |
        export TOKEN=$(curl -fsSL "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/caddy:pull" | jq --raw-output '.token')
        export CREATED=$(curl -fsSL -H "Authorization: Bearer $TOKEN" "https://registry.hub.docker.com/v2/library/caddy/manifests/builder" | jq .history[0].v1Compatibility -r | jq --raw-output '.created')
        export ITEMS=$(curl -fsSL -H "Authorization: Bearer $TOKEN" "https://registry.hub.docker.com/v2/library/caddy/manifests/builder" | jq .history[0].v1Compatibility -r | jq ".config.Env | .[]" -r)
        for x in $ITEMS; do if [[ "$x" == CADDY_VERSION=* ]]; then export "$x"; fi done
        echo ::set-output name=latest_version::$CADDY_VERSION
        echo ::set-output name=current_version::$(<caddy.version)
        echo ::set-output name=latest_created::$CREATED
        echo ::set-output name=current_created::$(<caddy.created)

        if [[ "$CADDY_VERSION" != "$(<caddy.version)" ]]
        then
          echo ::set-output name=updated::true
        else
          echo ::set-output name=updated::false
        fi
        
    - name: Update caddy version file, commit and push
      if: steps.caddy-version.outputs.current_created != steps.caddy-version.outputs.latest_created
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        echo ${{ steps.caddy-version.outputs.latest_version }} > caddy.version
        echo ${{ steps.caddy-version.outputs.latest_created }} > caddy.created
        git add .
        git commit -am "Automated update to ${{ steps.caddy-version.outputs.latest_version }}"
        git push
        
    - name: Update tag
      if: steps.caddy-version.outputs.current_version != steps.caddy-version.outputs.latest_version
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git tag ${{ steps.caddy-version.outputs.latest_version }}
        git push --tags

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request' && steps.caddy-version.outputs.current_created != steps.caddy-version.outputs.latest_created
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' && steps.caddy-version.outputs.current_created != steps.caddy-version.outputs.latest_created }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
